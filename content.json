{"meta":{"title":"oopcoder","subtitle":null,"description":null,"author":"lanboys1225","url":"https://me.oopcoder.cn","root":"/"},"pages":[{"title":"关于","date":"2019-08-02T11:01:44.177Z","updated":"2019-08-02T11:01:44.177Z","comments":true,"path":"about/index.html","permalink":"https://me.oopcoder.cn/about/index.html","excerpt":"","text":"[][3] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [][4] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [][5] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [][6] 我是个快乐的小码农，现就职于深圳 [](http://www.szhittech.com/) ，喜欢美剧和各种风格的纯音乐。 关于主题本站主题是：Material XMac用户可以下载客户端哦： MaterialX-Installer.dmg 欢迎留言～"},{"title":"所有标签","date":"2019-08-04T03:17:24.944Z","updated":"2019-08-04T03:17:24.944Z","comments":true,"path":"blog/tags/index.html","permalink":"https://me.oopcoder.cn/blog/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-08-04T03:17:24.943Z","updated":"2019-08-04T03:17:24.943Z","comments":true,"path":"blog/categories/index.html","permalink":"https://me.oopcoder.cn/blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"删除pom仓库中lastUpdated方法","slug":"pom-lastupdated","date":"2019-08-04T05:20:02.000Z","updated":"2019-08-04T05:24:58.513Z","comments":true,"path":"2019/08/04/pom-lastupdated/","link":"","permalink":"https://me.oopcoder.cn/2019/08/04/pom-lastupdated/","excerpt":"","text":"在使用maven管理pom项目的时候，多多少少会遇到一些奇葩的问题，比如网络良好，idea非离线状态，科学上网模式，maven就是死活无法更新jar包，很令人头大，无从下手找原因，当我们去查看maven本地仓库的时候，发现有些包里会多了一些以 .lastUpdated 结尾的文件，那么问题来了 为什么maven仓库会出现这些文件? 又会导致什么问题? 在idea网络状态很差或者离线状态时，需要从远程仓库下载某些jar包到本地参库时，因网络差，无法下载，导致本地仓库出现 xx.jar.lastUpdated 或者 xx.pom.lastUpdated 文件(文件具体作用暂时不清楚)， 由于这些文件的存在，即使网络变好后，项目仍然报错， 无法重新下载需要的jar包 解决方法: 方法非常简单粗暴，找到本地仓库对应jar包目录位置将 .lastUpdated 文件删除, 刷新项目重新下载即可 有的小伙伴可能会问，仓库那么多，总不会让我一个个找到然后删除吧，机智，下面给大家提供了两个一键删除脚本： 1、cleanLastUpdated.bat（windows版本）123456789rem 这里写你的仓库路径set REPOSITORY_PATH=D:\\Java\\maven-repositoryrem 正在搜索...for /f &quot;delims=&quot; %%i in (&apos;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&apos;) do ( echo %%i del /s /q &quot;%%i&quot;)rem 搜索完毕pause 2、cleanLastUpdated.sh（linux版本）12345# 这里写你的仓库路径REPOSITORY_PATH=~/Documents/tools/repositoryecho 正在搜索...find $REPOSITORY_PATH -name &quot;*lastUpdated*&quot; | xargs rm -frecho 搜索完 参考：maven仓库中的LastUpdated文件生成原因及删除","categories":[{"name":"maven","slug":"maven","permalink":"https://me.oopcoder.cn//blog/categories/maven/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://me.oopcoder.cn//blog/tags/maven/"},{"name":"pom","slug":"pom","permalink":"https://me.oopcoder.cn//blog/tags/pom/"}]},{"title":"Hexo 博客搭建（一）","slug":"hexo-blog-create","date":"2019-08-02T07:20:02.000Z","updated":"2019-08-04T05:22:39.611Z","comments":true,"path":"2019/08/02/hexo-blog-create/","link":"","permalink":"https://me.oopcoder.cn/2019/08/02/hexo-blog-create/","excerpt":"","text":"网上学习搭建hexo博客的教程一抓一大把，但是基本上都没说清楚这中间的原理到底是啥？那么让我带领大家一起去探个究竟，学习之前，我们先看看 Github Pages (以下简称 gp) 和 Hexo 到底是什么？ 1. 什么是Github Pages?官方文档是这样描述的： 1GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository. 好了，文档看完了，接下来可以愉快的创建一个属于自己的博客了，我先假设：你已经有了GitHub的账号，并且账号是 AAA， 首先 我们创建一个 名称为 AAA.github.io (名称必须按这个格式)的git仓库，如下图： 然后，在浏览器中输入 http://AAA.github.io 看到如上界面，说明我们的最简单的 github博客已经搭建完成啦~ 2. 什么是 Hexo?Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 官方文档 点这查看 看到这里，可能还是一脸懵逼，不过我们需要知道 gp 和 hexo 之间的联系，在我看来, 他们之间其实没有任何关系，唯一的联系是： github 会托管静态网页，而 hexo 会生成静态网页，我们只是将hexo生成的网页放到 github上，这样访问 AAA.github.io 就访问了hexo生成的网页 这关系一下子就清楚了，接下来继续。。 3. 环境 Node.js / Git 安装来到这步，说明你已经了解了上述的概念 主要流程： 安装 git 安装 node node安装好之后，安装 hexo 安装细节的话，我们还是按照官方文档进行 坑：1.执行 npm install -g hexo-cli 长时间无响应，或者报如下错 1234567$ npm install -g hexo-clinpm ERR! code EAI_AGAINnpm ERR! errno EAI_AGAINnpm ERR! request to https://registry.npmjs.org/hexo-cli failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org:443npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\lanbing\\AppData\\Roaming\\npm-cache\\_logs\\2018-03-13T02_15_13_203Z-debug.log 解决办法：执行 $ npm install -g npm 更新 npm , 然后再次执行 $ npm install -g hexo-cli 1234567891011$ npm install -g npmC:\\Users\\lanbing\\AppData\\Roaming\\npm\\npm -&gt; C:\\Users\\lanbing\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.jsC:\\Users\\lanbing\\AppData\\Roaming\\npm\\npx -&gt; C:\\Users\\lanbing\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npx-cli.jsnpm@5.7.1added 533 packages in 113.185sC:\\Users\\lanbing\\AppData\\Roaming\\npm\\hexo -&gt; C:\\Users\\lanbing\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\bin\\hexonpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\\hexo-cli\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)hexo-cli@1.1.0added 103 packages from 338 contributors in 73.08s 4.Hexo博客搭建踩过一系列的坑之后，现在终于可以开始搭建 hexo blog了 新建一个文件夹叫 helloBlog (可自己随便取名字，无所谓) 进入文件夹 helloBlog 中， 在 git bash 窗口里面执行下面命令初始化博客 12$ hexo init $ npm install //这条命令不执行，貌似也可以，不过官方文档写明要执行，那就执行吧 执行完命令后，文件夹目录如下表示初始化成功 12345678 .├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 博客已经构建好了，现在需要的是一个本地服务器来进行部署，Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用， 用如下命令安装： 1$ npm install hexo-server --save 现在启动服务器 12345$ hexo s //或者 hexo server// 出现如下信息，表明已经成功启动了服务器$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 现在在浏览器中输入 http://localhost:4000/或者 http://127.0.0.1:4000/（有的电脑，输入localhost访问不了，就用 127.0.0.1 访问）就可以访问啦~~ 到目前为止，我们知道了在怎么样利用 github 和 hexo 搭建博客, 但是要怎么实现上面说的，将 hexo 生成的静态博客网页，放到 github 中进行托管？就等下一篇文章再给大家讲解啦！！","categories":[{"name":"hexo","slug":"hexo","permalink":"https://me.oopcoder.cn//blog/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://me.oopcoder.cn//blog/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-08-02T07:10:02.000Z","updated":"2019-08-04T05:26:58.657Z","comments":true,"path":"2019/08/02/hello-world/","link":"","permalink":"https://me.oopcoder.cn/2019/08/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}