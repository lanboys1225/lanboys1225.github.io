{"meta":{"title":"OOPcoder","subtitle":null,"description":null,"author":"lanboys1225","url":"http://me.oopcoder.cn","root":"/"},"pages":[{"title":"我的朋友们","date":"2019-08-05T07:45:07.344Z","updated":"2019-08-05T07:45:07.344Z","comments":true,"path":"friends/index.html","permalink":"http://me.oopcoder.cn/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： OOPcoder头像： https://me.oopcoder.cn/assets/images/oopcoder.jpg网址： https://me.oopcoder.cn标签： Java"},{"title":"关于","date":"2019-08-05T09:01:23.160Z","updated":"2019-08-05T09:01:23.160Z","comments":true,"path":"about/index.html","permalink":"http://me.oopcoder.cn/about/index.html","excerpt":"","text":"这是我的个人博客项目，里面会记录生活和技术的点点滴滴。 访问地址：https://me.oopcoder.cn 我的微信公众号 OOPcoder 欢迎留言～"},{"title":"所有分类","date":"2019-08-03T08:47:32.659Z","updated":"2019-08-01T07:42:58.161Z","comments":true,"path":"blog/categories/index.html","permalink":"http://me.oopcoder.cn/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-08-03T09:23:15.295Z","updated":"2019-08-03T09:23:15.295Z","comments":true,"path":"blog/tags/index.html","permalink":"http://me.oopcoder.cn/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"内嵌iframe实现html页面轮播","slug":"html-swiper-iframe","date":"2019-08-06T11:52:39.000Z","updated":"2019-08-09T08:33:13.445Z","comments":true,"path":"2019/08/06/html-swiper-iframe/","link":"","permalink":"http://me.oopcoder.cn/2019/08/06/html-swiper-iframe/","excerpt":"","text":"需求是这样的，我们的产品要在某个展厅中展示，主办方要求我们提供部分系统界面在电视上作为宣传页，时间紧迫，已经来不及开发了，我就在想，能不能轮播我们系统已经存在的页面（哈哈，我是有多么懒），省心省力，想法虽好，但是作为一个前端白痴 ( 没怎么写过前端代码，轮播图都没实现过 )，对我来说还是有难度的啊~~ 但是没办法，自己提出来的想法，含着泪也得实现。 经过一天的查资料，终于实现了，实现后发现原来这么简单，下面把代码贴出来，鼓励自己继续学习前端。 代码是jsp写的，用在html的话改改就可以了 轮播控件用的是 swiper , 然后用iframe实现网页内嵌 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; %&gt;&lt;%@page import=&quot;java.util.Calendar&quot; %&gt;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;%@ taglib prefix=&quot;shiro&quot; uri=&quot;http://shiro.apache.org/tags&quot; %&gt;&lt;c:set var=&quot;ctx&quot; value=&quot;$&#123;pageContext.request.contextPath&#125;&quot;/&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Swiper demo&lt;/title&gt; &lt;!-- Link Swiper&apos;s CSS --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;ctx&#125;/static/swiper/css/swiper.min.css&quot;&gt; &lt;!-- Demo styles --&gt; &lt;style&gt; html, body &#123; position: relative; height: 100%; &#125; body &#123; background: #eee; font-family: Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 14px; color: #000; margin: 0; padding: 0; &#125; .swiper-container &#123; width: 100%; height: 100%; &#125; .swiper-slide &#123; text-align: center; font-size: 18px; background: #fff; /* Center slide text vertically */ display: -webkit-box; display: -ms-flexbox; display: -webkit-flex; display: flex; -webkit-box-pack: center; -ms-flex-pack: center; -webkit-justify-content: center; justify-content: center; -webkit-box-align: center; -ms-flex-align: center; -webkit-align-items: center; align-items: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- Swiper --&gt;&lt;div class=&quot;swiper-container&quot;&gt; &lt;div class=&quot;swiper-wrapper&quot;&gt; &lt;!-- url1,url2,url3,url4 替换成网页地址，注意跨域问题--&gt; &lt;div class=&quot;swiper-slide&quot;&gt; &lt;iframe height=&quot;100%&quot; width=&quot;100%&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;url1&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt; &lt;iframe height=&quot;100%&quot; width=&quot;100%&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;url2&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt; &lt;iframe height=&quot;100%&quot; width=&quot;100%&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;url3&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt; &lt;iframe height=&quot;100%&quot; width=&quot;100%&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;url4&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 如果需要导航按钮 --&gt; &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt; &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- Swiper JS --&gt;&lt;script src=&quot;$&#123;ctx&#125;/static/swiper/js/swiper.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;ctx&#125;/static/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;!-- Initialize Swiper --&gt;&lt;script var swiper = new Swiper(&apos;.swiper-container&apos;, &#123; loop: true, autoplay: &#123; delay: 10000//10秒切换一次 // stopOnLastSlide: false, // disableOnInteraction: true &#125;, //开启循环 speed: 2000, // 如果需要前进后退按钮 navigation: &#123; nextEl: &apos;.swiper-button-next&apos;, prevEl: &apos;.swiper-button-prev&apos; &#125; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"html","slug":"html","permalink":"http://me.oopcoder.cn/blog/categories/html/"}],"tags":[{"name":"html","slug":"html","permalink":"http://me.oopcoder.cn/blog/tags/html/"},{"name":"iframe","slug":"iframe","permalink":"http://me.oopcoder.cn/blog/tags/iframe/"},{"name":"banner","slug":"banner","permalink":"http://me.oopcoder.cn/blog/tags/banner/"},{"name":"swiper","slug":"swiper","permalink":"http://me.oopcoder.cn/blog/tags/swiper/"}]},{"title":"Linux命令行样式定制","slug":"linux-xshell-css","date":"2019-08-05T13:53:02.000Z","updated":"2019-08-09T08:33:13.447Z","comments":true,"path":"2019/08/05/linux-xshell-css/","link":"","permalink":"http://me.oopcoder.cn/2019/08/05/linux-xshell-css/","excerpt":"","text":"在使用linux命令行时候，总是难以区分命令和结果的具体界线，不知道当前的路径在哪里，就像下面这样，无形之中降低了我们的效率。但是我们在用git bash的时候不会有这个烦恼，那我们能不能将linux中的界面样式定制一下，变成git bash这样呢？答案是肯定的。 linux命令行界面 git bash 界面 通过查资料发现，要想修改命令行头部显示样式，实际的操作就是覆盖系统本身的 PS1 变量，如下代码所示，在当前用户(这里是root用户)的./bashrc中添加 PS1 的值就可以了 12345678910111213141516[root@VM_72_235_centos ~]# vi .bashrc[root@VM_72_235_centos ~]# cat .bashrc# .bashrc# User specific aliases and functionsalias rm=&apos;rm -i&apos;alias cp=&apos;cp -i&apos;alias mv=&apos;mv -i&apos;# Source global definitionsif [ -f /etc/bashrc ]; then . /etc/bashrcfi# 添加这行就可以了PS1=&apos;[\\[\\e[00;35m\\]\\u@dev \\t\\[\\e[0m\\]]\\[\\e[0;33m\\](\\w)\\$\\[\\e[0m\\] &apos;[root@VM_72_235_centos ~]# source .bashrc (执行这句设置生效，只对当前用户生效)[root@dev 22:36:51](~)# ls (发现生效了) 先将这行代码拆分如下，再来分析具体意思 12345 [ //表示【 [ 】 颜色为 默认颜色\\[\\e[00;35m\\] \\u@dev \\t //表示【 \\u@dev \\t 】 颜色为 【 \\[\\e[00;35m\\] 】\\[\\e[0m\\] ] //表示【 ] 】 颜色为 【 \\[\\e[0m\\] 】\\[\\e[0;33m\\] (\\w)\\$ //表示【 (\\w)\\$ 】 颜色为 【 \\[\\e[0;33m\\] 】\\[\\e[0m\\] //取消设置(设置回默认颜色) [\\e[00;35m] 该设置是应用到后面字符上，直到有其他设置，所以最后要设置回默认颜色 设置字符序列颜色的格式为：[\\e[F;Bm] 其中“F”为字体颜色，编号30 ~ 37；“B”为背景色，编号40 ~ 47 颜色表前景 | 背景 | 颜色—|—|—30 | 40 | 黑色31 | 41 | 红色32 | 42 | 绿色33 | 43 | 黄色34 | 44 | 蓝色35 | 45 | 紫红色36 | 46 | 青蓝色37 | 47 | 白色 变量值： \\d ：可显示出『星期 月 日』的日期格式，如：”Mon Feb 2” \\H ：完整的主机名称。举例来说，鸟哥的练习机为『www.vbird.tsai』 \\h ：仅取主机名称在第一个小数点之前的名字，如鸟哥主机则为『www』后面省略 \\t ：显示时间，为 24 小时格式的『HH:MM:SS』 \\T ：显示时间，为 12 小时格式的『HH:MM:SS』 \\A ：显示时间，为 24 小时格式的『HH:MM』 @ ：显示时间，为 12 小时格式的『am/pm』样式 \\u ：目前使用者的帐号名称，如『root』； \\v ：BASH 的版本资讯，如鸟哥的测试主机版本为 3.2.25(1)，仅取『3.2』显示 \\w ：完整的工作目录名称，由根目录写起的目录名称。但家目录会以 ~ 取代； \\W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。 # ：下达的第几个指令。 $ ：提示字元，如果是 root 时，提示字元为 # ，否则就是 $ \\n : new line,表示另起一行显示指令符 通过上面的颜色及变量值对照表，就可以轻松的定制出适合自己的样式啦。 我的配置如下，跟git bash相近 12345PS1=&apos;\\[\\e[00;35m\\]\\u@\\h \\t \\[\\e[0;33m\\]\\w (12.22.34.179)\\n\\$\\[\\e[0m\\] &apos; 效果如下(颜色在这里没显示出来)：root@VM_72_235_centos 21:22:43 /usr/local/share (12.22.34.179)$ less log.log 参考：在xshell中将命令行移至下一行: http://blog.sina.com.cn/s/blog_96a11ddf0102vbb7.html","categories":[{"name":"linux","slug":"linux","permalink":"http://me.oopcoder.cn/blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://me.oopcoder.cn/blog/tags/linux/"},{"name":"xshell","slug":"xshell","permalink":"http://me.oopcoder.cn/blog/tags/xshell/"}]},{"title":"为什么有时候maven无法更新jar包","slug":"maven-lastupdated","date":"2019-08-04T05:20:02.000Z","updated":"2019-08-05T01:24:58.327Z","comments":true,"path":"2019/08/04/maven-lastupdated/","link":"","permalink":"http://me.oopcoder.cn/2019/08/04/maven-lastupdated/","excerpt":"","text":"在使用maven管理pom项目的时候，多多少少会遇到一些奇葩的问题，比如网络良好，idea非离线状态，科学上网模式，maven就是死活无法更新jar包，很令人头大，无从下手找原因，当我们去查看maven本地仓库的时候，发现有些包里会多了一些以 .lastUpdated 结尾的文件，那么问题来了 为什么maven仓库会出现这些文件? 又会导致什么问题? 在idea网络状态很差或者离线状态时，需要从远程仓库下载某些jar包到本地参库时，因网络差，无法下载，导致本地仓库出现 xx.jar.lastUpdated 或者 xx.pom.lastUpdated 文件(文件具体作用暂时不清楚)， 由于这些文件的存在，即使网络变好后，项目仍然报错， 无法重新下载需要的jar包 解决方法: 方法非常简单粗暴，找到本地仓库对应jar包目录位置将 .lastUpdated 文件删除, 刷新项目重新下载即可 有的小伙伴可能会问，仓库那么多，总不会让我一个个找到然后删除吧，机智，下面给大家提供了两个一键删除脚本： 1、cleanLastUpdated.bat（windows版本）123456789rem 这里写你的仓库路径set REPOSITORY_PATH=D:\\Java\\maven-repositoryrem 正在搜索...for /f &quot;delims=&quot; %%i in (&apos;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&apos;) do ( echo %%i del /s /q &quot;%%i&quot;)rem 搜索完毕pause 2、cleanLastUpdated.sh（linux版本）12345# 这里写你的仓库路径REPOSITORY_PATH=~/Documents/tools/repositoryecho 正在搜索...find $REPOSITORY_PATH -name &quot;*lastUpdated*&quot; | xargs rm -frecho 搜索完 参考：maven仓库中的LastUpdated文件生成原因及删除","categories":[{"name":"maven","slug":"maven","permalink":"http://me.oopcoder.cn/blog/categories/maven/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://me.oopcoder.cn/blog/tags/maven/"},{"name":"pom","slug":"pom","permalink":"http://me.oopcoder.cn/blog/tags/pom/"}]},{"title":"Hexo 博客搭建（一）","slug":"hexo-blog-create","date":"2019-08-02T07:20:02.000Z","updated":"2019-08-05T01:24:58.326Z","comments":true,"path":"2019/08/02/hexo-blog-create/","link":"","permalink":"http://me.oopcoder.cn/2019/08/02/hexo-blog-create/","excerpt":"","text":"网上学习搭建hexo博客的教程一抓一大把，但是基本上都没说清楚这中间的原理到底是啥？那么让我带领大家一起去探个究竟，学习之前，我们先看看 Github Pages (以下简称 gp) 和 Hexo 到底是什么？ 1. 什么是Github Pages?官方文档是这样描述的： 1GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository. 好了，文档看完了，接下来可以愉快的创建一个属于自己的博客了，我先假设：你已经有了GitHub的账号，并且账号是 AAA， 首先 我们创建一个 名称为 AAA.github.io (名称必须按这个格式)的git仓库，如下图： 然后，在浏览器中输入 http://AAA.github.io 看到如上界面，说明我们的最简单的 github博客已经搭建完成啦~ 2. 什么是 Hexo?Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 官方文档 点这查看 看到这里，可能还是一脸懵逼，不过我们需要知道 gp 和 hexo 之间的联系，在我看来, 他们之间其实没有任何关系，唯一的联系是： github 会托管静态网页，而 hexo 会生成静态网页，我们只是将hexo生成的网页放到 github上，这样访问 AAA.github.io 就访问了hexo生成的网页 这关系一下子就清楚了，接下来继续。。 3. 环境 Node.js / Git 安装来到这步，说明你已经了解了上述的概念 主要流程： 安装 git 安装 node node安装好之后，安装 hexo 安装细节的话，我们还是按照官方文档进行 坑：1.执行 npm install -g hexo-cli 长时间无响应，或者报如下错 1234567$ npm install -g hexo-clinpm ERR! code EAI_AGAINnpm ERR! errno EAI_AGAINnpm ERR! request to https://registry.npmjs.org/hexo-cli failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org:443npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\lanbing\\AppData\\Roaming\\npm-cache\\_logs\\2018-03-13T02_15_13_203Z-debug.log 解决办法：执行 $ npm install -g npm 更新 npm , 然后再次执行 $ npm install -g hexo-cli 1234567891011$ npm install -g npmC:\\Users\\lanbing\\AppData\\Roaming\\npm\\npm -&gt; C:\\Users\\lanbing\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.jsC:\\Users\\lanbing\\AppData\\Roaming\\npm\\npx -&gt; C:\\Users\\lanbing\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npx-cli.jsnpm@5.7.1added 533 packages in 113.185sC:\\Users\\lanbing\\AppData\\Roaming\\npm\\hexo -&gt; C:\\Users\\lanbing\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\bin\\hexonpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\\hexo-cli\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)hexo-cli@1.1.0added 103 packages from 338 contributors in 73.08s 4.Hexo博客搭建踩过一系列的坑之后，现在终于可以开始搭建 hexo blog了 新建一个文件夹叫 helloBlog (可自己随便取名字，无所谓) 进入文件夹 helloBlog 中， 在 git bash 窗口里面执行下面命令初始化博客 12$ hexo init $ npm install //这条命令不执行，貌似也可以，不过官方文档写明要执行，那就执行吧 执行完命令后，文件夹目录如下表示初始化成功 12345678 .├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 博客已经构建好了，现在需要的是一个本地服务器来进行部署，Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用， 用如下命令安装： 1$ npm install hexo-server --save 现在启动服务器 12345$ hexo s //或者 hexo server// 出现如下信息，表明已经成功启动了服务器$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 现在在浏览器中输入 http://localhost:4000/或者 http://127.0.0.1:4000/（有的电脑，输入localhost访问不了，就用 127.0.0.1 访问）就可以访问啦~~ 到目前为止，我们知道了在怎么样利用 github 和 hexo 搭建博客, 但是要怎么实现上面说的，将 hexo 生成的静态博客网页，放到 github 中进行托管？就等下一篇文章再给大家讲解啦！！","categories":[{"name":"hexo","slug":"hexo","permalink":"http://me.oopcoder.cn/blog/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://me.oopcoder.cn/blog/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-08-02T07:10:02.000Z","updated":"2019-08-05T01:24:58.324Z","comments":true,"path":"2019/08/02/hello-world/","link":"","permalink":"http://me.oopcoder.cn/2019/08/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}